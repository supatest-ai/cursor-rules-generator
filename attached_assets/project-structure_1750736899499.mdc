---
description: Use this when you need to understand project structure
globs: 
alwaysApply: false
---
# Project Structure Guide

This is a monorepo managed with pnpm workspaces and Turborepo. The project consists of several key packages:

## Core Packages
- [frontend](mdc:frontend): Main frontend application
- [api](mdc:api): Backend API service
- [ui](mdc:ui): Shared UI component library
- [runner](mdc:runner): Test runner implementation
- [shared](mdc:shared): Shared utilities and types
- [extension](mdc:extension): Browser extension core
- [live-browser-extension](mdc:live-browser-extension): Live browser extension features
- [proxy](mdc:proxy): Proxy service
- [email](mdc:email): Email service
- [cli](mdc:cli): Command-line interface tools

## Key Configuration Files
- [package.json](mdc:package.json): Root package configuration and workspace definitions
- [pnpm-workspace.yaml](mdc:pnpm-workspace.yaml): PNPM workspace configuration
- [turbo.json](mdc:turbo.json): Turborepo pipeline configuration
- [docker-compose.yml](mdc:docker-compose.yml): Docker services configuration

## Development Configuration
- [.eslintrc.js](mdc:.eslintrc.js): ESLint configuration
- [.prettierrc](mdc:.prettierrc): Prettier configuration
- [tsconfig.json](mdc:tsconfig.json): TypeScript configuration

## Architecture Guidelines
1. Use shared components from the `ui` package for consistent design
2. Share common types and utilities through the `shared` package
3. Follow the established module structure within each package
4. Keep package-specific logic within its own workspace
5. Use proper dependency management through pnpm workspaces
